// HMR Utility –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥–æ—Ä—è—á–µ–π –∑–∞–º–µ–Ω–æ–π –º–æ–¥—É–ª–µ–π
import { logger } from '@/engine/logging';

export interface HMRBoundary {
  start: () => void;
  stop: () => void;
  accept?: (mod: any) => void;
}

/**
 * –°–æ–∑–¥–∞–µ—Ç HMR boundary –¥–ª—è –ø–æ–¥—Å–∏—Å—Ç–µ–º—ã
 * @param key - —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
 * @param boundary - –æ–±—ä–µ–∫—Ç —Å –º–µ—Ç–æ–¥–∞–º–∏ start/stop/accept
 */
export function makeHmrBoundary(key: string, boundary: HMRBoundary) {
  if (!import.meta.hot) return;

  // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º teardown
  import.meta.hot.dispose(() => {
    logger.info(`üî• HMR dispose: ${key}`, { source: 'hmr' });
    try {
      boundary.stop();
    } catch (error) {
      logger.warn(`‚ö†Ô∏è Error stopping ${key}`, { 
        error: error instanceof Error ? error.message : String(error),
        source: 'hmr' 
      });
    }
  });

  // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º accept –µ—Å–ª–∏ –µ—Å—Ç—å
  if (boundary.accept) {
    import.meta.hot.accept(boundary.accept);
  }

  logger.info(`‚úÖ HMR boundary registered: ${key}`, { source: 'hmr' });
}

/**
 * HMR boundary –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–µ—Ä–∞
 */
export function createRendererHMR(renderer: any) {
  return makeHmrBoundary('renderer', {
    start: () => {
      logger.info('üé® Starting renderer HMR', { source: 'hmr' });
    },
    stop: () => {
      logger.info('üé® Stopping renderer HMR', { source: 'hmr' });
      try {
        renderer?.destroy?.();
      } catch (error) {
        logger.warn('‚ö†Ô∏è Error destroying renderer', { 
          error: error instanceof Error ? error.message : String(error),
          source: 'hmr' 
        });
      }
    }
  });
}

/**
 * HMR boundary –¥–ª—è –∞—É–¥–∏–æ —Å–∏—Å—Ç–µ–º—ã
 */
export function createAudioHMR(audioManager: any) {
  return makeHmrBoundary('audio', {
    start: () => {
      logger.info('üîä Starting audio HMR', { source: 'hmr' });
    },
    stop: () => {
      logger.info('üîä Stopping audio HMR', { source: 'hmr' });
      try {
        audioManager?.cleanup?.();
      } catch (error) {
        logger.warn('‚ö†Ô∏è Error cleaning up audio', { 
          error: error instanceof Error ? error.message : String(error),
          source: 'hmr' 
        });
      }
    }
  });
}

/**
 * HMR boundary –¥–ª—è —Å—Ü–µ–Ω—ã
 */
export function createSceneHMR(sceneManager: any) {
  return makeHmrBoundary('scene', {
    start: () => {
      logger.info('üé¨ Starting scene HMR', { source: 'hmr' });
    },
    stop: () => {
      logger.info('üé¨ Stopping scene HMR', { source: 'hmr' });
      try {
        // –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ü–µ–Ω—É
        const currentScene = sceneManager?.current;
        if (currentScene) {
          for (const gameObject of currentScene.gameObjects) {
            gameObject._onRemovedFromScene?.();
          }
          currentScene.gameObjects.length = 0;
        }
      } catch (error) {
        logger.warn('‚ö†Ô∏è Error cleaning up scene', { 
          error: error instanceof Error ? error.message : String(error),
          source: 'hmr' 
        });
      }
    }
  });
}

/**
 * HMR boundary –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
 */
export function createEffectsHMR(effectSystem: any) {
  return makeHmrBoundary('effects', {
    start: () => {
      logger.info('‚ú® Starting effects HMR', { source: 'hmr' });
    },
    stop: () => {
      logger.info('‚ú® Stopping effects HMR', { source: 'hmr' });
      try {
        effectSystem?.stop?.();
        effectSystem?.clear?.();
      } catch (error) {
        logger.warn('‚ö†Ô∏è Error cleaning up effects', { 
          error: error instanceof Error ? error.message : String(error),
          source: 'hmr' 
        });
      }
    }
  });
}

/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π HMR boundary –¥–ª—è –ª—é–±—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
 */
export function createServiceHMR(serviceName: string, service: any) {
  return makeHmrBoundary(serviceName, {
    start: () => {
      logger.info(`üîß Starting ${serviceName} HMR`, { source: 'hmr' });
    },
    stop: () => {
      logger.info(`üîß Stopping ${serviceName} HMR`, { source: 'hmr' });
      try {
        // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ—á–∏—Å—Ç–∫–∏
        service?.destroy?.();
        service?.cleanup?.();
        service?.clear?.();
        service?.stop?.();
      } catch (error) {
        logger.warn(`‚ö†Ô∏è Error cleaning up ${serviceName}`, { 
          error: error instanceof Error ? error.message : String(error),
          source: 'hmr' 
        });
      }
    }
  });
}
