/**
 * Panel Positioning Service - –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ UI –ø–∞–Ω–µ–ª–µ–π —Å —É—á—ë—Ç–æ–º safe-area
 */

import type { LayoutResult, Anchor } from '@/engine/render';
import { placeAnchoredCentered } from '@/engine/render/LayoutEngine';

import { logger } from '@/engine/logging';
import { RENDER_CONFIG } from '../render/RenderConfig';
export interface PanelConfig {
  id: string;
  anchor: Anchor;
  offsetX?: number;
  offsetY?: number;
  element?: HTMLElement;
}

export class PanelPositioningService {
  private panels = new Map<string, PanelConfig>();
  private currentLayout: LayoutResult | null = null;
  private resizeHandler: (() => void) | null = null;

  /**
   * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–∞–Ω–µ–ª–∏ –¥–ª—è –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  registerPanel(config: PanelConfig): void {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –ª–∏ —É–∂–µ –ø–∞–Ω–µ–ª—å —Å —Ç–∞–∫–∏–º ID
    if (this.panels.has(config.id)) {
      logger.warn(`Panel ${config.id} already registered, updating instead`, { source: 'game' });
      this.updatePanel(config);
      return;
    }

    this.panels.set(config.id, config);
    this.updatePanelPosition(config.id);
    
    // –î–æ–±–∞–≤–ª—è–µ–º fallback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ—Å–∞–π–∑–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–∞–Ω–µ–ª–∏
    this.ensureResizeHandler();
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–∞–Ω–µ–ª–∏
   */
  updatePanel(config: Partial<PanelConfig> & { id: string }): void {
    const existing = this.panels.get(config.id);
    if (existing) {
      const updated = { ...existing, ...config };
      this.panels.set(config.id, updated);
      this.updatePanelPosition(config.id);
    }
  }

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ –ø–∞–Ω–µ–ª–∏
   */
  unregisterPanel(id: string): void {
    this.panels.delete(id);
  }

  hasPanel(id: string): boolean {
    return this.panels.has(id);
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ layout'–∞ –∏ –ø–µ—Ä–µ—Å—á—ë—Ç –ø–æ–∑–∏—Ü–∏–π –≤—Å–µ—Ö –ø–∞–Ω–µ–ª–µ–π
   */
  updateLayout(layout: LayoutResult): void {
    this.currentLayout = layout;
    this.panels.forEach((_, id) => this.updatePanelPosition(id));
  }

  /**
   * –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–∞–Ω–µ–ª–∏
   */
  private updatePanelPosition(panelId: string): void {
    const panel = this.panels.get(panelId);
    if (!panel || !panel.element || !this.currentLayout) return;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç –≤—Å–µ –µ—â–µ –≤ DOM
    if (!document.contains(panel.element)) {
      logger.warn(`Panel ${panelId} element is not in DOM, removing from service`, { source: 'game' });
      this.panels.delete(panelId);
      return;
    }

    const { anchor, offsetX = 0, offsetY = 0 } = panel;
    const { safe } = this.currentLayout;

    // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã —ç–ª–µ–º–µ–Ω—Ç–∞ —Å retry –¥–ª—è —Ö–æ—Ç-—Ä–µ–ª–æ–∞–¥–∞
    const rect = panel.element.getBoundingClientRect();
    let elementWidth = rect.width;
    let elementHeight = rect.height;

    // –ï—Å–ª–∏ —Ä–∞–∑–º–µ—Ä—ã –Ω—É–ª–µ–≤—ã–µ (—á–∞—Å—Ç–æ –ø—Ä–∏ —Ö–æ—Ç-—Ä–µ–ª–æ–∞–¥–µ), –∂–¥–µ–º —Å–ª–µ–¥—É—é—â–∏–π –∫–∞–¥—Ä
    if (elementWidth === 0 || elementHeight === 0) {
      logger.debug(`Panel ${panelId} has zero dimensions, retrying next frame`, { source: 'game' });
      requestAnimationFrame(() => this.updatePanelPosition(panelId));
      return;
    }

    // –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é —Å —É—á—ë—Ç–æ–º safe area –∏—Å–ø–æ–ª—å–∑—É—è LayoutEngine
    const position = placeAnchoredCentered(anchor, safe, 1.0, elementWidth, elementHeight, offsetX, offsetY);
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–æ–∑–∏—Ü–∏—é
    panel.element.style.position = 'fixed';
    panel.element.style.left = `${position.x}px`;
    panel.element.style.top = `${position.y}px`;
    panel.element.style.right = 'auto';
    panel.element.style.bottom = 'auto';
    panel.element.style.transform = 'none';

    logger.info(`üìê Panel ${panelId} positioned at (${position.x}, ${position.y}) with anchor ${anchor}`, { source: 'game' });
  }

  refreshPanel(id: string): void {
    this.updatePanelPosition(id);
  }

  refreshAll(): void {
    this.panels.forEach((_, id) => this.updatePanelPosition(id));
  }


  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –ø–æ–∑–∏—Ü–∏–π –≤—Å–µ—Ö –ø–∞–Ω–µ–ª–µ–π (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
   */
  getPanelPositions(): Record<string, { x: number; y: number; anchor: Anchor }> {
    const positions: Record<string, { x: number; y: number; anchor: Anchor }> = {};
    
    this.panels.forEach((panel, id) => {
      if (panel.element) {
        const rect = panel.element.getBoundingClientRect();
        positions[id] = {
          x: rect.left,
          y: rect.top,
          anchor: panel.anchor
        };
      }
    });
    
    return positions;
  }

  /**
   * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –Ω–∞–ª–∏—á–∏–µ fallback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Ä–µ—Å–∞–π–∑–∞
   */
  private ensureResizeHandler(): void {
    if (this.resizeHandler) return;
    
    this.resizeHandler = () => {
      // Fallback: –µ—Å–ª–∏ layout –Ω–µ –æ–±–Ω–æ–≤–∏–ª—Å—è —á–µ—Ä–µ–∑ EventBus, –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Ä—É—á–Ω—É—é
      if (this.panels.size > 0) {
        logger.debug('üîÑ Fallback resize handler triggered', { source: 'game' });
        this.forceUpdateAllPanels();
      }
    };
    
    window.addEventListener('resize', this.resizeHandler);
    logger.debug('üìê Added fallback resize handler', { source: 'game' });
  }

  /**
   * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–∞–Ω–µ–ª–µ–π (fallback)
   */
  private forceUpdateAllPanels(): void {
    if (this.panels.size === 0) return;
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ä–∞–∑–º–µ—Ä—ã —ç–∫—Ä–∞–Ω–∞ –∏ insets
    const screenW = window.innerWidth;
    const screenH = window.innerHeight;
    const insets = this.readSafeInsets();
    
    // –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—ã–π layout
    const newLayout = this.computeLayout(screenW, screenH, insets);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –ø–∞–Ω–µ–ª–∏
    this.updateLayout(newLayout);
  }

  /**
   * –ß—Ç–µ–Ω–∏–µ safe-area insets (–∫–æ–ø–∏—è –∏–∑ LayoutEngine)
   */
  private readSafeInsets(): { top: number; right: number; bottom: number; left: number } {
    const el = document.getElementById('safe-probe');
    if (!el) {
      return { top: 20, right: 16, bottom: 20, left: 16 };
    }
    
    const cs = getComputedStyle(el);
    const toPx = (s: string) => {
      const value = parseFloat(s || '0');
      return isNaN(value) || !isFinite(value) ? 0 : value;
    };
    
    return {
      top: toPx(cs.paddingTop),
      right: toPx(cs.paddingRight),
      bottom: toPx(cs.paddingBottom),
      left: toPx(cs.paddingLeft),
    };
  }

  /**
   * –í—ã—á–∏—Å–ª–µ–Ω–∏–µ layout (–∫–æ–ø–∏—è –∏–∑ LayoutEngine)
   */
  private computeLayout(screenW: number, screenH: number, insets: { top: number; right: number; bottom: number; left: number }): LayoutResult {
    const safeW = screenW - insets.left - insets.right;
    const safeH = screenH - insets.top - insets.bottom;

    // Game layer - fit –≤ safe area
    const { referenceResolution } = RENDER_CONFIG;
    const scaleGame = Math.min(safeW / referenceResolution.w, safeH / referenceResolution.h);
    const game: { x: number; y: number; w: number; h: number } = {
      w: referenceResolution.w * scaleGame,
      h: referenceResolution.h * scaleGame,
      x: insets.left + (safeW - referenceResolution.w * scaleGame) / 2,
      y: insets.top + (safeH - referenceResolution.h * scaleGame) / 2
    };

    // Background layer - –ø–æ–∫—Ä—ã–≤–∞–µ—Ç –≤–µ—Å—å —ç–∫—Ä–∞–Ω
    const bg: { x: number; y: number; w: number; h: number } = {
      w: screenW,
      h: screenH,
      x: 0,
      y: 0
    };

    const safe: { x: number; y: number; w: number; h: number } = { 
      x: insets.left, 
      y: insets.top, 
      w: safeW, 
      h: safeH 
    };
    
    return { 
      bg, 
      game, 
      safe, 
      scaleGame, 
      scaleBg: 1.0, 
      scaleUI: 1.0 
    };
  }

  /**
   * –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ (–¥–ª—è —Ö–æ—Ç-—Ä–µ–ª–æ–∞–¥–∞)
   */
  clearAll(): void {
    logger.info('üßπ Clearing all panels from positioning service', { source: 'game' });
    this.panels.clear();
    this.currentLayout = null;
    
    // –£–¥–∞–ª—è–µ–º fallback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    if (this.resizeHandler) {
      window.removeEventListener('resize', this.resizeHandler);
      this.resizeHandler = null;
    }
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞–Ω–µ–ª–µ–π (—ç–ª–µ–º–µ–Ω—Ç—ã –Ω–µ –≤ DOM)
   */
  cleanupInactivePanels(): void {
    const inactivePanels: string[] = [];
    
    this.panels.forEach((panel, id) => {
      if (!panel.element || !document.contains(panel.element)) {
        inactivePanels.push(id);
      }
    });
    
    inactivePanels.forEach(id => {
      logger.debug(`Removing inactive panel: ${id}`, { source: 'game' });
      this.panels.delete(id);
    });
    
    if (inactivePanels.length > 0) {
      logger.info(`üßπ Cleaned up ${inactivePanels.length} inactive panels`, { source: 'game' });
    }
  }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
export const panelPositioningService = new PanelPositioningService();
