import * as PIXI from 'pixi.js';
import { logger } from '@/engine/logging';
import { TextureFactory } from '@game/graphics/TextureFactory';
import { FONT_FAMILIES, FontType } from '@assets/fonts/fonts';
import { getPixiFontFamily } from '@utils/fontUtils';

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–≥—Ä–æ–≤—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
 * –û–±—ë—Ä—Ç–∫–∞ –Ω–∞–¥ PIXI.Assets –¥–ª—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–∫—Å—Ç—É—Ä, –∑–≤—É–∫–æ–≤ –∏ —à—Ä–∏—Ñ—Ç–æ–≤
 */
export class AssetLoader {
  private loadedAssets = new Map<string, any>();
  private loadedFonts = new Set<string>();
  private fontPromises = new Map<string, Promise<void>>();
  private isInitialized = false;
  private _texturesLoaded = false;
  private textureFactory: TextureFactory;

  constructor() {
    this.textureFactory = TextureFactory.getInstance();
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑—á–∏–∫–∞ –∞—Å—Å–µ—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ —à—Ä–∏—Ñ—Ç—ã –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è)
   */
  public async initialize(): Promise<void> {
    logger.info('üì¶ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑—á–∏–∫–∞ –∞—Å—Å–µ—Ç–æ–≤ (—à—Ä–∏—Ñ—Ç—ã)...', { source: 'game' });

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ PIXI.Assets
    PIXI.Assets.init();

    // 1. –ó–∞–≥—Ä—É–∂–∞–µ–º —à—Ä–∏—Ñ—Ç—ã (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–µ—Ä–≤—ã–º–∏)
    await this.loadFonts();

    this.isInitialized = true;
    logger.info('‚úÖ AssetLoader –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (—Ç–æ–ª—å–∫–æ —à—Ä–∏—Ñ—Ç—ã)!', { source: 'game' });
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—Å—Ç—É—Ä (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–µ–Ω–¥–µ—Ä–µ—Ä–∞)
   */
  public async loadTextures(): Promise<void> {
    if (this._texturesLoaded) {
      logger.warn('–¢–µ–∫—Å—Ç—É—Ä—ã —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!', { source: 'game' });
      return;
    }

    logger.info('üé® AssetLoader: –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—Å—Ç—É—Ä –Ω–∞—á–∞—Ç–∞ –≤–Ω–µ—à–Ω–∏–º —Å–µ—Ä–≤–∏—Å–æ–º...', { source: 'game' });

    // –°–∞–º–∞ –∑–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–ø–µ—Ä—å –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è GameAssetService
    // –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ —Ç–µ–ø–µ—Ä—å –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏, —á—Ç–æ –∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
  }

  public completeTextureLoading(): void {
    this._texturesLoaded = true;
    logger.info('‚úÖ AssetLoader: –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—Å—Ç—É—Ä –∑–∞–≤–µ—Ä—à–µ–Ω–∞!', { source: 'game' });
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ —à—Ä–∏—Ñ—Ç–æ–≤
   */
  private async loadFonts(): Promise<void> {
    logger.info('üî§ –ó–∞–≥—Ä—É–∑–∫–∞ —à—Ä–∏—Ñ—Ç–æ–≤...', { source: 'game' });

    // –ó–∞–≥—Ä—É–∂–∞–µ–º CSS —Å —à—Ä–∏—Ñ—Ç–∞–º–∏
    await this.loadFontCSS();
    
    // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —à—Ä–∏—Ñ—Ç–æ–≤
    await this.waitForFonts();
    
    logger.info('‚úÖ –®—Ä–∏—Ñ—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã', { source: 'game' });
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∏—Ç—å CSS —Ñ–∞–π–ª —Å —à—Ä–∏—Ñ—Ç–∞–º–∏
   */
  private async loadFontCSS(): Promise<void> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω –ª–∏ —É–∂–µ CSS
    if (document.querySelector('link[data-fonts="true"]')) {
      logger.info('üìù Font CSS —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω', { source: 'game' });
      return;
    }

    let fontsCssUrl: string | null = null;
    try {
      const module = await import('@/assets/fonts/fonts.css?url');
      fontsCssUrl = module.default;
    } catch (error) {
      logger.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å URL fonts.css', { source: 'game', error });
      return;
    }

    if (!fontsCssUrl) {
      logger.warn('‚ö†Ô∏è fonts.css URL –ø—É—Å—Ç–æ–π, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É', { source: 'game' });
      return;
    }

    await new Promise<void>((resolve) => {
      const link = document.createElement('link');
      link.rel = 'stylesheet';
      link.href = fontsCssUrl as string;
      link.crossOrigin = 'anonymous';
      link.dataset.fonts = 'true';

      link.onload = () => {
        logger.info('üìù Font CSS –∑–∞–≥—Ä—É–∂–µ–Ω', { source: 'game' });
        // –î–∞–µ–º –≤—Ä–µ–º—è –±—Ä–∞—É–∑–µ—Ä—É –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å CSS
        setTimeout(resolve, 100);
      };

      link.onerror = () => {
        logger.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å font CSS, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback', { source: 'game' });
        resolve(); // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å
      };

      document.head.appendChild(link);
    });
  }

  /**
   * –ñ–¥–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö —à—Ä–∏—Ñ—Ç–æ–≤
   */
  private async waitForFonts(): Promise<void> {
    const fontFamilies = Object.values(FONT_FAMILIES).map(family => family.split(',')[0].replace(/['"]/g, ''));
    
    logger.info('üî§ –ó–∞–≥—Ä—É–∂–∞–µ–º —à—Ä–∏—Ñ—Ç—ã:', { fontFamilies, source: 'game' });
    
    const promises = fontFamilies.map(family => this.waitForFont(family));
    const results = await Promise.allSettled(promises);
    
    // –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    results.forEach((result, index) => {
      const fontFamily = fontFamilies[index];
      if (result.status === 'fulfilled') {
        logger.info(`‚úÖ ${fontFamily} –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ`, { source: 'game' });
      } else {
        logger.warn(`‚ö†Ô∏è ${fontFamily} –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å:`, { error: result.reason, source: 'game' });
      }
    });
  }

  /**
   * –ñ–¥–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —à—Ä–∏—Ñ—Ç–∞
   */
  private async waitForFont(fontFamily: string): Promise<void> {
    if (this.loadedFonts.has(fontFamily)) {
      return;
    }

    if (this.fontPromises.has(fontFamily)) {
      return this.fontPromises.get(fontFamily)!;
    }

    const promise = this.waitForFontInternal(fontFamily);
    this.fontPromises.set(fontFamily, promise);
    
    try {
      await promise;
      this.loadedFonts.add(fontFamily);
      //logger.info(`‚úÖ –®—Ä–∏—Ñ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω: ${fontFamily}`, { source: 'game' });
    } catch (error) {
      logger.warn(`‚ö†Ô∏è –®—Ä–∏—Ñ—Ç –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω: ${fontFamily}`, { error, source: 'game' });
      this.loadedFonts.add(fontFamily); // –î–æ–±–∞–≤–ª—è–µ–º —á—Ç–æ–±—ã –Ω–µ –ø—ã—Ç–∞—Ç—å—Å—è —Å–Ω–æ–≤–∞
    }

    return promise;
  }

  /**
   * –í–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —à—Ä–∏—Ñ—Ç–∞
   */
  private async waitForFontInternal(fontFamily: string): Promise<void> {
    return new Promise((resolve) => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≥—Ä—É–∂–µ–Ω –ª–∏ —à—Ä–∏—Ñ—Ç
      if (this.isFontActuallyLoaded(fontFamily)) {
        resolve();
        return;
      }

      // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —à—Ä–∏—Ñ—Ç–∞ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
      let attempts = 0;
      const maxAttempts = 50; // 2.5 —Å–µ–∫—É–Ω–¥—ã –º–∞–∫—Å–∏–º—É–º

      const checkFont = () => {
        attempts++;
        
        if (this.isFontActuallyLoaded(fontFamily)) {
          resolve();
          return;
        }

        if (attempts >= maxAttempts) {
          logger.warn(`Timeout waiting for font: ${fontFamily}`, { source: 'game' });
          resolve(); // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å fallback
          return;
        }

        requestAnimationFrame(checkFont);
      };

      checkFont();
    });
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ —à—Ä–∏—Ñ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω
   */
  private isFontActuallyLoaded(fontFamily: string): boolean {
    // –°–ø–æ—Å–æ–± 1: —á–µ—Ä–µ–∑ document.fonts.check
    if (document.fonts && document.fonts.check) {
      try {
        if (document.fonts.check(`16px "${fontFamily}"`)) {
          return true;
        }
      } catch (error) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ FontFaceSet
      }
    }

    // –°–ø–æ—Å–æ–± 2: —á–µ—Ä–µ–∑ —Å–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
    try {
      const testElement = document.createElement('span');
      testElement.style.fontFamily = `"${fontFamily}", monospace`;
      testElement.style.fontSize = '16px';
      testElement.style.position = 'absolute';
      testElement.style.visibility = 'hidden';
      testElement.textContent = 'Test';
      
      document.body.appendChild(testElement);
      
      const computedStyle = window.getComputedStyle(testElement);
      const actualFont = computedStyle.fontFamily;
      
      document.body.removeChild(testElement);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—Ä–∞—É–∑–µ—Ä –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–∞—à —à—Ä–∏—Ñ—Ç, –∞ –Ω–µ fallback
      return actualFont.includes(fontFamily);
    } catch (error) {
      // –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ —à—Ä–∏—Ñ—Ç –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω
      return false;
    }
  }

  /**
   * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≥—Ä—É–ø–ø—ã —Ç–µ–∫—Å—Ç—É—Ä
   */
  public registerTextureGroup(
    assetPaths: Record<string, string>,
    assetNameMapper: (key: string) => string
  ): void {
    for (const [key, path] of Object.entries(assetPaths)) {
      PIXI.Assets.add({ alias: assetNameMapper(key), src: path });
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ –æ–¥–Ω–æ–π —Ç–µ–∫—Å—Ç—É—Ä—ã
   */
  public async loadTexture(assetName: string): Promise<PIXI.Texture | null> {
    if (this.loadedAssets.has(assetName)) {
      return this.loadedAssets.get(assetName);
    }
    try {
      const texture = await PIXI.Assets.load(assetName);
      this.loadedAssets.set(assetName, texture);
      return texture;
    } catch (error) {
      logger.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ–∫—Å—Ç—É—Ä—É', { asset: assetName, source: 'game' });
      return null;
    }
  }


  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ –≥—Ä—É–ø–ø—ã —Ä–µ—Å—É—Ä—Å–æ–≤
   */
  public async loadTextureGroup(
    assetPaths: Record<string, string>, 
    assetNameMapper: (key: string) => string
  ): Promise<void> {
    for (const [key] of Object.entries(assetPaths)) {
      const asset = assetNameMapper(key);
      await this.loadTexture(asset);
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ä–µ—Å—É—Ä—Å
   */
  public getAsset<T = any>(name: string): T | null {
    if (!this.isInitialized) {
      logger.warn('AssetLoader –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!', { source: 'game' });
      return null;
    }

    return this.loadedAssets.get(name) || null;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∑–∞–≥—Ä—É–∂–µ–Ω –ª–∏ —Ä–µ—Å—É—Ä—Å
   */
  public hasAsset(name: string): boolean {
    return this.loadedAssets.has(name);
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã
   */
  public getAllAssets(): Map<string, any> {
    return new Map(this.loadedAssets);
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ª–∏ –∑–∞–≥—Ä—É–∑—á–∏–∫
   */
  public get initialized(): boolean {
    return this.isInitialized;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ª–∏ —Ç–µ–∫—Å—Ç—É—Ä—ã
   */
  public get texturesLoaded(): boolean {
    return this._texturesLoaded;
  }




  // ===== FONT API =====

  /**
   * –ü–æ–ª—É—á–∏—Ç—å CSS-—Å–æ–≤–º–µ—Å—Ç–∏–º–æ–µ –∏–º—è —à—Ä–∏—Ñ—Ç–∞
   */
  public getFontFamily(fontType: FontType): string {
    const fontFamily = FONT_FAMILIES[fontType];
    
    // –ï—Å–ª–∏ —à—Ä–∏—Ñ—Ç –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º fallback
    const primaryFont = fontFamily.split(',')[0].replace(/['"]/g, '');
    if (!this.isFontLoaded(primaryFont)) {
      logger.warn(`‚ö†Ô∏è –®—Ä–∏—Ñ—Ç ${primaryFont} –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback`, { source: 'game' });
    }
    
    return fontFamily;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å PixiJS-—Å–æ–≤–º–µ—Å—Ç–∏–º–æ–µ –∏–º—è —à—Ä–∏—Ñ—Ç–∞
   */
  public getPixiFontFamily(fontType: FontType): string {
    return getPixiFontFamily(fontType);
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∑–∞–≥—Ä—É–∂–µ–Ω –ª–∏ —à—Ä–∏—Ñ—Ç
   */
  public isFontLoaded(fontFamily: string): boolean {
    return this.loadedFonts.has(fontFamily);
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —à—Ä–∏—Ñ—Ç–æ–≤
   */
  public getFontStats(): { loaded: number; total: number; fonts: string[] } {
    const totalFonts = Object.values(FONT_FAMILIES).length;
    return {
      loaded: this.loadedFonts.size,
      total: totalFonts,
      fonts: Array.from(this.loadedFonts)
    };
  }

  // ===== UNIFIED API =====

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ä–µ—Å—É—Ä—Å –ø–æ –∏–º–µ–Ω–∏ (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥)
   * –°–Ω–∞—á–∞–ª–∞ –∏—â–µ—Ç –≤ —Ç–µ–∫—Å—Ç—É—Ä–∞—Ö, –ø–æ—Ç–æ–º –≤ —à—Ä–∏—Ñ—Ç–∞—Ö
   */
  public getResource<T = any>(name: string): T | null {
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º AssetLoader
    const asset = this.getAsset<T>(name);
    if (asset) {
      return asset;
    }

    // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–±—É–µ–º –∫–∞–∫ —à—Ä–∏—Ñ—Ç
    if (this.isFontLoaded(name)) {
      return this.getFontFamily(name as FontType) as T;
    }

    return null;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∑–∞–≥—Ä—É–∂–µ–Ω –ª–∏ —Ä–µ—Å—É—Ä—Å (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥)
   */
  public hasResource(name: string): boolean {
    return this.hasAsset(name) || this.isFontLoaded(name);
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—Å—É—Ä—Å–æ–≤
   */
  public getResourceStats(): {
    textures: number;
    fonts: number;
    total: number;
    isInitialized: boolean;
  } {
    const fontStats = this.getFontStats();
    
    return {
      textures: this.loadedAssets.size,
      fonts: fontStats.loaded,
      total: this.loadedAssets.size + fontStats.loaded,
      isInitialized: this.isInitialized
    };
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
   */
  public destroy(): void {
    this.loadedAssets.clear();
    this.loadedFonts.clear();
    this.fontPromises.clear();
    this.textureFactory.clearCache();
    PIXI.Assets.reset();
    this.isInitialized = false;
    logger.info('üßπ –ó–∞–≥—Ä—É–∑—á–∏–∫ –∞—Å—Å–µ—Ç–æ–≤ –æ—á–∏—â–µ–Ω', { source: 'game' });
  }
}
