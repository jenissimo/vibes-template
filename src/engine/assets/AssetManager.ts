import { logger } from '@/engine/logging';
import { AssetLoader } from './loaders/AssetLoader';
import { ServiceRegistry, ServiceKeys } from '@/engine/registry';

/**
 * AssetManager - –µ–¥–∏–Ω–∞—è —Ç–æ—á–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ–º–∏ –∞—Å—Å–µ—Ç–∞–º–∏
 * –¢–µ–ø–µ—Ä—å AssetLoader —Å–∞–º —É–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ–º–∏ —Ç–∏–ø–∞–º–∏ –∞—Å—Å–µ—Ç–æ–≤ (—Ç–µ–∫—Å—Ç—É—Ä—ã, —à—Ä–∏—Ñ—Ç—ã, –∑–≤—É–∫–∏)
 */
export class AssetManager {
  private static instance: AssetManager | null = null;
  public loader!: AssetLoader;
  private isInitialized = false;
  private _texturesLoaded = false;

  public static getInstance(): AssetManager {
    if (!AssetManager.instance) {
      AssetManager.instance = new AssetManager();
    }
    return AssetManager.instance;
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AssetManager (—Ç–æ–ª—å–∫–æ —à—Ä–∏—Ñ—Ç—ã)
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —à—Ä–∏—Ñ—Ç—ã –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –±–∞–∑–æ–≤—ã–µ —Ä–µ—Å—É—Ä—Å—ã
   */
  public async initialize(): Promise<void> {
    if (this.isInitialized) {
      logger.warn('AssetManager —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!', { source: 'assets' });
      return;
    }

    logger.info('üéØ AssetManager: –Ω–∞—á–∞–ª–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ (—à—Ä–∏—Ñ—Ç—ã)...', { source: 'assets' });

    try {
      // 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AssetLoader (—Ç–æ–ª—å–∫–æ —à—Ä–∏—Ñ—Ç—ã)
      logger.info('üì¶ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AssetLoader...', { source: 'assets' });
      this.loader = new AssetLoader();
      await this.loader.initialize();
      logger.info('‚úÖ AssetLoader –≥–æ—Ç–æ–≤ (—à—Ä–∏—Ñ—Ç—ã)', { source: 'assets' });

      // 2. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ ServiceRegistry
      this.registerServices();

      this.isInitialized = true;
      logger.info('‚úÖ AssetManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!', { source: 'assets' });
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ AssetManager', error as Error);
      throw error;
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—Å—Ç—É—Ä (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–µ–Ω–¥–µ—Ä–µ—Ä–∞)
   */
  public async loadTextures(): Promise<void> {
    if (this._texturesLoaded) {
      logger.warn('–¢–µ–∫—Å—Ç—É—Ä—ã —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!', { source: 'assets' });
      return;
    }

    if (!this.isInitialized) {
      throw new Error('AssetManager –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π —Ç–µ–∫—Å—Ç—É—Ä!');
    }

    logger.info('üé® AssetManager: –∑–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—Å—Ç—É—Ä...', { source: 'assets' });

    try {
      await this.loader.loadTextures();
      this._texturesLoaded = true;
      logger.info('‚úÖ –¢–µ–∫—Å—Ç—É—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã!', { source: 'assets' });
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–∫—Å—Ç—É—Ä', error as Error);
      throw error;
    }
  }

  /**
   * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤ –≤ ServiceRegistry
   */
  private registerServices(): void {
    ServiceRegistry.register(ServiceKeys.AssetLoader, this.loader, { replace: true });
    ServiceRegistry.register(ServiceKeys.AssetManager, this, { replace: true });
    
    logger.info('üìã AssetManager —Å–µ—Ä–≤–∏—Å—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã', { source: 'assets' });
  }

  // ===== FONT API =====

  /**
   * –ü–æ–ª—É—á–∏—Ç—å CSS-—Å–æ–≤–º–µ—Å—Ç–∏–º–æ–µ –∏–º—è —à—Ä–∏—Ñ—Ç–∞
   */
  public getFontFamily(fontType: import('@assets/fonts/fonts').FontType): string {
    this.ensureInitialized();
    return this.loader.getFontFamily(fontType);
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å PixiJS-—Å–æ–≤–º–µ—Å—Ç–∏–º–æ–µ –∏–º—è —à—Ä–∏—Ñ—Ç–∞
   */
  public getPixiFontFamily(fontType: import('@assets/fonts/fonts').FontType): string {
    this.ensureInitialized();
    return this.loader.getPixiFontFamily(fontType);
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∑–∞–≥—Ä—É–∂–µ–Ω –ª–∏ —à—Ä–∏—Ñ—Ç
   */
  public isFontLoaded(fontFamily: string): boolean {
    this.ensureInitialized();
    return this.loader.isFontLoaded(fontFamily);
  }

  // ===== ASSET API =====

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ä–µ—Å—É—Ä—Å
   */
  public getAsset<T = any>(name: string): T | null {
    this.ensureInitialized();
    return this.loader.getAsset<T>(name);
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∑–∞–≥—Ä—É–∂–µ–Ω –ª–∏ —Ä–µ—Å—É—Ä—Å
   */
  public hasAsset(name: string): boolean {
    this.ensureInitialized();
    return this.loader.hasAsset(name);
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã
   */
  public getAllAssets(): Map<string, any> {
    this.ensureInitialized();
    return this.loader.getAllAssets();
  }

  // ===== UNIFIED API =====

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ä–µ—Å—É—Ä—Å –ø–æ –∏–º–µ–Ω–∏ (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥)
   * –°–Ω–∞—á–∞–ª–∞ –∏—â–µ—Ç –≤ —Ç–µ–∫—Å—Ç—É—Ä–∞—Ö, –ø–æ—Ç–æ–º –≤ —à—Ä–∏—Ñ—Ç–∞—Ö
   */
  public getResource<T = any>(name: string): T | null {
    this.ensureInitialized();
    return this.loader.getResource<T>(name);
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∑–∞–≥—Ä—É–∂–µ–Ω –ª–∏ —Ä–µ—Å—É—Ä—Å (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥)
   */
  public hasResource(name: string): boolean {
    this.ensureInitialized();
    return this.loader.hasResource(name);
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
   */
  public getStats(): {
    textures: number;
    fonts: number;
    total: number;
    isInitialized: boolean;
  } {
    this.ensureInitialized();
    return this.loader.getResourceStats();
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
   */
  public destroy(): void {
    if (this.loader) {
      this.loader.destroy();
    }
    
    this.isInitialized = false;
    logger.info('üßπ AssetManager –æ—á–∏—â–µ–Ω', { source: 'assets' });
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä
   */
  public get initialized(): boolean {
    return this.isInitialized;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ª–∏ —Ç–µ–∫—Å—Ç—É—Ä—ã
   */
  public get texturesLoaded(): boolean {
    return this._texturesLoaded;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ AssetLoader
   */
  public get assetLoader(): AssetLoader {
    this.ensureInitialized();
    return this.loader;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
   */
  private ensureInitialized(): void {
    if (!this.isInitialized) {
      throw new Error('AssetManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω! –í—ã–∑–æ–≤–∏—Ç–µ initialize() —Å–Ω–∞—á–∞–ª–∞.');
    }
  }
}

export const assetManager = AssetManager.getInstance();
