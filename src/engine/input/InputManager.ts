import { Vector2 } from '@/shared/types';
import { logger } from '@/engine/logging';
import { ServiceRegistry, ServiceKeys } from '@/engine/registry';
import { CoordinateService } from '@/engine/coordinates';
import { eventBus } from '@/engine/events/EventBus';
import { withEventDispatcher } from '@/engine/events/IEventDispatcher';

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–≤–æ–¥–æ–º (–º—ã—à—å –∏ —Ç–∞—á)
 * –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –µ–¥–∏–Ω—ã–π API
 */
class InputManagerBase {
  private static instance: InputManagerBase | null = null;
  private isPointerDown = false;
  private pointerPosition: Vector2 = { x: 0, y: 0 };
  private lastPointerPosition: Vector2 = { x: 0, y: 0 };
  private pointerDelta: Vector2 = { x: 0, y: 0 };
  private canvas: HTMLCanvasElement | null = null;
  private coordinateService: CoordinateService;

  // –ü—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
  private boundHandlers: {
    handlePointerDown: (e: MouseEvent) => void;
    handlePointerMove: (e: MouseEvent) => void;
    handlePointerUp: (e: MouseEvent) => void;
    handleTouchStart: (e: TouchEvent) => void;
    handleTouchMove: (e: TouchEvent) => void;
    handleTouchEnd: (e: TouchEvent) => void;
  } | null = null;

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≤–≤–æ–¥–∞
   */
  constructor() {
    this.coordinateService = CoordinateService.getInstance();
    this.createBoundHandlers();
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
   */
  private createBoundHandlers(): void {
    this.boundHandlers = {
      handlePointerDown: this.handlePointerDown.bind(this),
      handlePointerMove: this.handlePointerMove.bind(this),
      handlePointerUp: this.handlePointerUp.bind(this),
      handleTouchStart: this.handleTouchStart.bind(this),
      handleTouchMove: this.handleTouchMove.bind(this),
      handleTouchEnd: this.handleTouchEnd.bind(this),
    };
  }

  public static getInstance(): InstanceType<typeof InputManager> {
    if (!InputManagerBase.instance) {
      InputManagerBase.instance = new InputManagerBase();
      ServiceRegistry.register(ServiceKeys.InputManager, InputManagerBase.instance);
    }
    return InputManagerBase.instance as InstanceType<typeof InputManager>;
  }

  public static resetInstance(): void {
    if (InputManagerBase.instance) {
      InputManagerBase.instance.destroy();
      InputManagerBase.instance = null;
      ServiceRegistry.unregister(ServiceKeys.InputManager);
    }
  }

  public initialize(): void {
    logger.info('üéÆ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≤–≤–æ–¥–∞...', { source: 'game' });

    this.canvas = document.getElementById('pixi-canvas') as HTMLCanvasElement;
    if (!this.canvas) {
      throw new Error('Canvas —ç–ª–µ–º–µ–Ω—Ç —Å id="pixi-canvas" –Ω–µ –Ω–∞–π–¥–µ–Ω!');
    }

    this.setupEventListeners();
    logger.info('‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä –≤–≤–æ–¥–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω', { source: 'game' });
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
   */
  private setupEventListeners(): void {
    if (!this.canvas || !this.boundHandlers) return;

    // –°–æ–±—ã—Ç–∏—è –º—ã—à–∏
    this.canvas.addEventListener('mousedown', this.boundHandlers.handlePointerDown);
    this.canvas.addEventListener('mousemove', this.boundHandlers.handlePointerMove);
    this.canvas.addEventListener('mouseup', this.boundHandlers.handlePointerUp);
    this.canvas.addEventListener('mouseleave', this.boundHandlers.handlePointerUp);

    // –°–æ–±—ã—Ç–∏—è —Ç–∞—á
    this.canvas.addEventListener('touchstart', this.boundHandlers.handleTouchStart);
    this.canvas.addEventListener('touchmove', this.boundHandlers.handleTouchMove);
    this.canvas.addEventListener('touchend', this.boundHandlers.handleTouchEnd);
    this.canvas.addEventListener('touchcancel', this.boundHandlers.handleTouchEnd);

    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –Ω–∞ –ø—Ä–∞–≤—ã–π –∫–ª–∏–∫
    this.canvas.addEventListener('contextmenu', (e) => e.preventDefault());
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –º—ã—à–∏
   */
  private handlePointerDown(event: MouseEvent): void {
    this.isPointerDown = true;
    this.updatePointerPosition(event.clientX, event.clientY);
    this.lastPointerPosition = { ...this.pointerPosition };
    
    logger.debug('Mouse down event', {
      position: this.pointerPosition,
      source: 'input'
    });
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ —á–µ—Ä–µ–∑ EventBus
    eventBus.emit('pointer-start', { position: this.pointerPosition });
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è –º—ã—à–∏
   */
  private handlePointerMove(event: MouseEvent): void {
    this.updatePointerPosition(event.clientX, event.clientY);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞–∂–∞—Ç
    if (this.isPointerDown) {
      eventBus.emit('pointer-move', { position: this.pointerPosition });
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—É—Å–∫–∞–Ω–∏—è –º—ã—à–∏
   */
  private handlePointerUp(_event: MouseEvent): void {
    this.isPointerDown = false;
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤–≤–æ–¥–∞
    eventBus.emit('pointer-end');
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª–∞ —Ç–∞—á
   */
  private handleTouchStart(event: TouchEvent): void {
    event.preventDefault();
    if (event.touches.length > 0) {
      logger.info(`[InputManager] Touch start: touches=${event.touches.length}, isPointerDown=${this.isPointerDown}`, { source: 'game' });
      this.isPointerDown = true;
      const touch = event.touches[0];
      this.updatePointerPosition(touch.clientX, touch.clientY);
      this.lastPointerPosition = { ...this.pointerPosition };
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ —á–µ—Ä–µ–∑ EventBus
      eventBus.emit('pointer-start', { position: this.pointerPosition });
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è —Ç–∞—á
   */
  private handleTouchMove(event: TouchEvent): void {
    event.preventDefault();
    if (event.touches.length > 0) {
      const touch = event.touches[0];
      this.updatePointerPosition(touch.clientX, touch.clientY);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞–∂–∞—Ç
      if (this.isPointerDown) {
        eventBus.emit('pointer-move', { position: this.pointerPosition });
      }
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç–∞—á
   */
  private handleTouchEnd(event: TouchEvent): void {
    event.preventDefault();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ–∫–æ–Ω—á–∞–Ω–∏–µ —Ç–∞—á–∞ (–Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞—Å–∞–Ω–∏–π)
    if (event.touches.length === 0) {
      this.isPointerDown = false;
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤–≤–æ–¥–∞
      eventBus.emit('pointer-end');
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ —É–∫–∞–∑–∞—Ç–µ–ª—è
   */
  private updatePointerPosition(clientX: number, clientY: number): void {
    if (!this.canvas) return;

    const rect = this.canvas.getBoundingClientRect();
    this.pointerPosition = {
      x: clientX - rect.left,
      y: clientY - rect.top,
    };
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≤–≤–æ–¥–∞ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–π –∫–∞–¥—Ä)
   */
  public update(_deltaTime: number): void {
    // –í—ã—á–∏—Å–ª—è–µ–º –¥–µ–ª—å—Ç—É –¥–≤–∏–∂–µ–Ω–∏—è
    this.pointerDelta = {
      x: this.pointerPosition.x - this.lastPointerPosition.x,
      y: this.pointerPosition.y - this.lastPointerPosition.y,
    };

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –ø–æ–∑–∏—Ü–∏—é
    this.lastPointerPosition = { ...this.pointerPosition };
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–∞–∂–∞—Ç –ª–∏ —É–∫–∞–∑–∞—Ç–µ–ª—å
   */
  public isPointerPressed(): boolean {
    return this.isPointerDown;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é —É–∫–∞–∑–∞—Ç–µ–ª—è
   */
  public getPointerPosition(): Vector2 {
    return { ...this.pointerPosition };
  }

  /**
   * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å canvas –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –∏–≥—Ä–æ–≤—ã–µ
   * –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π CoordinateService
   */
  public screenToGame(canvasX: number, canvasY: number): Vector2 {
    return this.coordinateService.screenToGame(canvasX, canvasY);
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –¥–µ–ª—å—Ç—É –¥–≤–∏–∂–µ–Ω–∏—è —É–∫–∞–∑–∞—Ç–µ–ª—è
   */
  public getPointerDelta(): Vector2 {
    return { ...this.pointerDelta };
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –±—ã–ª –ª–∏ –∫–ª–∏–∫ (–Ω–∞–∂–∞—Ç–∏–µ –∏ –æ—Ç–ø—É—Å–∫–∞–Ω–∏–µ –≤ –æ–¥–Ω–æ–π —Ç–æ—á–∫–µ)
   */
  public wasPointerClicked(): boolean {
    // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –µ—Å–ª–∏ –¥–µ–ª—å—Ç–∞ –¥–≤–∏–∂–µ–Ω–∏—è –º–∞–ª–∞, —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ –∫–ª–∏–∫–æ–º
    const deltaLength = Math.sqrt(
      this.pointerDelta.x * this.pointerDelta.x + 
      this.pointerDelta.y * this.pointerDelta.y
    );
    return !this.isPointerDown && deltaLength < 5; // 5 –ø–∏–∫—Å–µ–ª–µ–π - –ø–æ—Ä–æ–≥ –¥–ª—è –∫–ª–∏–∫–∞
  }

  // –£–±—Ä–∞–ª–∏ –º–µ—Ç–æ–¥—ã –ø–æ–¥–ø–∏—Å–∫–∏ - —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º EventBus –Ω–∞–ø—Ä—è–º—É—é

  /**
   * –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
   */
  public destroy(): void {
    if (this.canvas && this.boundHandlers) {
      this.canvas.removeEventListener('mousedown', this.boundHandlers.handlePointerDown);
      this.canvas.removeEventListener('mousemove', this.boundHandlers.handlePointerMove);
      this.canvas.removeEventListener('mouseup', this.boundHandlers.handlePointerUp);
      this.canvas.removeEventListener('mouseleave', this.boundHandlers.handlePointerUp);
      this.canvas.removeEventListener('touchstart', this.boundHandlers.handleTouchStart);
      this.canvas.removeEventListener('touchmove', this.boundHandlers.handleTouchMove);
      this.canvas.removeEventListener('touchend', this.boundHandlers.handleTouchEnd);
      this.canvas.removeEventListener('touchcancel', this.boundHandlers.handleTouchEnd);
    }

    // EventBus –æ—á–∏—â–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

    this.canvas = null;
    this.boundHandlers = null;
    logger.info('üßπ –ú–µ–Ω–µ–¥–∂–µ—Ä –≤–≤–æ–¥–∞ –æ—á–∏—â–µ–Ω', { source: 'game' });
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º InputManager —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π IEventDispatcher
export const InputManager = withEventDispatcher(InputManagerBase);
export type InputManager = InstanceType<typeof InputManager>;
