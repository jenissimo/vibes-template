// engine/Game.ts
import { Scene } from "./scene/Scene";
import { SceneManager } from "./scene/SceneManager";
import { PixiRenderer } from "./render/PixiRenderer";
import { AssetManager } from "./assets/AssetManager";
import { InputManager } from "./input/InputManager";
import { EffectSystem } from "./effects/EffectSystem";
import { audioManager } from "./audio/AudioManager";
import { logger } from "./logging";
import { PixiConfig } from "./render/PixiRenderer";
import { Ticker } from "./Ticker";

export interface GameConfig {
  enableDebugOverlay?: boolean;
  enableFPSLimit?: boolean;
  targetFPS?: number;
  enableAudio?: boolean;
  enableEffects?: boolean;
  pixi?: PixiConfig;
}

export class Game {
  private pixiRenderer!: PixiRenderer;
  private assetManager!: AssetManager;
  private inputManager!: InstanceType<typeof InputManager>;
  private effectSystem!: EffectSystem;
  private audioManager = audioManager;
  private ticker!: Ticker;
  private isInitialized = false;
  private config: GameConfig;

  constructor(config: GameConfig = {}, private firstScene: Scene) {
    this.config = {
      enableDebugOverlay: false,
      enableFPSLimit: true,
      targetFPS: 60,
      enableAudio: true,
      enableEffects: true,
      ...config
    };
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –∏ —Å–∏—Å—Ç–µ–º –∏–≥—Ä—ã
   */
  public async initialize(): Promise<void> {
    if (this.isInitialized) {
      logger.warn('Game —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!', { source: 'game' });
      return;
    }

    logger.info('üéÆ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä–æ–≤–æ–≥–æ —è–¥—Ä–∞...', { source: 'game' });

    try {
      // 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AssetManager (—à—Ä–∏—Ñ—Ç—ã)
      logger.info('üì¶ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AssetManager...', { source: 'game' });
      this.assetManager = AssetManager.getInstance();
      await this.assetManager.initialize();
      logger.info('‚úÖ AssetManager –≥–æ—Ç–æ–≤', { source: 'game' });

      // 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PixiRenderer
      logger.info('üé® –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PixiRenderer...', { source: 'game' });
      this.pixiRenderer = new PixiRenderer(this.config.pixi);
      await this.pixiRenderer.initialize();
      logger.info('‚úÖ PixiRenderer –≥–æ—Ç–æ–≤', { source: 'game' });

      // 3. –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—Å—Ç—É—Ä –±—É–¥–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –∏–∑ main.ts
      this.assetManager.loader.completeTextureLoading();

      // 4. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è InputManager
      logger.info('üéÆ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è InputManager...', { source: 'game' });
      this.inputManager = InputManager.getInstance();
      this.inputManager.initialize();
      logger.info('‚úÖ InputManager –≥–æ—Ç–æ–≤', { source: 'game' });

      // 5. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AudioManager
      if (this.config.enableAudio) {
        logger.info('üîä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AudioManager...', { source: 'game' });
        await this.audioManager.initialize();
        logger.info('‚úÖ AudioManager –≥–æ—Ç–æ–≤', { source: 'game' });
      }

      // 6. –°–æ–∑–¥–∞–Ω–∏–µ EffectSystem (–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—É–¥–µ—Ç –≤ —Å—Ü–µ–Ω–µ)
      if (this.config.enableEffects) {
        logger.info('‚ú® –°–æ–∑–¥–∞–Ω–∏–µ EffectSystem...', { source: 'game' });
        const stage = this.pixiRenderer.getStage();
        this.effectSystem = new EffectSystem(stage, this.pixiRenderer.getRenderer(), this.audioManager);
        // –ù–µ –∑–∞–ø—É—Å–∫–∞–µ–º —Å—Ä–∞–∑—É - —Å—Ü–µ–Ω–∞ —Å–∞–º–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∏ –∑–∞–ø—É—Å—Ç–∏—Ç
        logger.info('‚úÖ EffectSystem —Å–æ–∑–¥–∞–Ω (–±—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å—Ü–µ–Ω–æ–π)', { source: 'game' });
      }

      // 7. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Ticker
      logger.info('‚è±Ô∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Ticker...', { source: 'game' });
      this.ticker = new Ticker();
      this.ticker.addUpdateCallback((deltaTime) => this.update(deltaTime));
      logger.info('‚úÖ Ticker –≥–æ—Ç–æ–≤', { source: 'game' });

      // 8. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ FPS –ª–∏–º–∏—Ç–∞
      if (this.config.enableFPSLimit && this.config.targetFPS) {
        this.pixiRenderer.setFPSLimit(this.config.targetFPS);
        logger.info(`üéØ FPS –ª–∏–º–∏—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${this.config.targetFPS}`, { source: 'game' });
      }

      this.isInitialized = true;
      logger.info('üéâ –ò–≥—Ä–æ–≤–æ–µ —è–¥—Ä–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ!', { source: 'game' });
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–≥—Ä–æ–≤–æ–≥–æ —è–¥—Ä–∞', error as Error);
      throw error;
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã –∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –ø–µ—Ä–≤—É—é —Å—Ü–µ–Ω—É
   */
  public startGame(): void {
    if (!this.isInitialized) {
      throw new Error('–ò–≥—Ä–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞. –í—ã–∑–æ–≤–∏—Ç–µ initialize() —Å–Ω–∞—á–∞–ª–∞.');
    }
    logger.info('üöÄ –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã –∏ –ø–µ—Ä–≤–æ–π —Å—Ü–µ–Ω—ã...', { source: 'game' });
    this.firstScene.initialize(this.getManagers());
    SceneManager().switch(this.firstScene);
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º Ticker
    this.ticker.start();
    logger.info('‚úÖ –°—Ç–∞—Ä—Ç–æ–≤–∞—è —Å—Ü–µ–Ω–∞ –∑–∞–ø—É—â–µ–Ω–∞ –∏ Ticker –∑–∞–ø—É—â–µ–Ω', { source: 'game' });
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–≥—Ä—ã
   */
  public stopGame(): void {
    if (this.ticker) {
      this.ticker.stop();
      logger.info('‚èπÔ∏è Ticker –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω', { source: 'game' });
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º –∏–≥—Ä—ã
   */
  public update(deltaTime: number): void {
    if (!this.isInitialized) {
      logger.warn('Game –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!', { source: 'game' });
      return;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã
    this.inputManager.update(deltaTime);
    
    if (this.effectSystem) {
      this.effectSystem.update(deltaTime);
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ü–µ–Ω—É
    SceneManager().update(deltaTime);
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ —Ç–∏–ø—É
   */
  public getManager<T>(managerType: 'renderer' | 'assets' | 'input' | 'effects' | 'audio'): T {
    switch (managerType) {
      case 'renderer':
        return this.pixiRenderer as T;
      case 'assets':
        return this.assetManager as T;
      case 'input':
        return this.inputManager as T;
      case 'effects':
        return this.effectSystem as T;
      case 'audio':
        return this.audioManager as T;
      default:
        throw new Error(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –º–µ–Ω–µ–¥–∂–µ—Ä–∞: ${managerType}`);
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ —Å—Ü–µ–Ω—É
   */
  public getManagers() {
    return {
      renderer: this.pixiRenderer,
      assets: this.assetManager,
      input: this.inputManager,
      effects: this.effectSystem,
      audio: this.audioManager,
      stage: this.pixiRenderer.getStage(),
      game: this, // –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∞–º –æ–±—ä–µ–∫—Ç Game
    };
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å SceneManager –¥–ª—è HMR
   */
  public getSceneManager() {
    return SceneManager();
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –ª–∏ –∏–≥—Ä–∞
   */
  public get initialized(): boolean {
    return this.isInitialized;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π FPS
   */
  public getFPS(): number {
    return this.ticker ? this.ticker.getFPS() : 0;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∑–∞–ø—É—â–µ–Ω –ª–∏ –∏–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª
   */
  public get isRunning(): boolean {
    return this.ticker ? this.ticker.running : false;
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
   */
  public destroy(): void {
    if (!this.isInitialized) return;

    logger.info('üßπ –û—á–∏—Å—Ç–∫–∞ –∏–≥—Ä–æ–≤–æ–≥–æ —è–¥—Ä–∞...', { source: 'game' });

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Ticker
    if (this.ticker) {
      this.ticker.stop();
    }

    // –û—á–∏—â–∞–µ–º —Å–∏—Å—Ç–µ–º—ã –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    if (this.effectSystem) {
      this.effectSystem.stop();
      this.effectSystem.clear();
    }

    // AudioManager - singleton, –Ω–µ –æ—á–∏—â–∞–µ–º –ø—Ä–∏ destroy

    if (this.inputManager) {
      this.inputManager.destroy();
    }

    if (this.assetManager) {
      this.assetManager.destroy();
    }

    if (this.pixiRenderer) {
      this.pixiRenderer.destroy();
    }

    this.isInitialized = false;
    logger.info('‚úÖ –ò–≥—Ä–æ–≤–æ–µ —è–¥—Ä–æ –æ—á–∏—â–µ–Ω–æ', { source: 'game' });
  }
}
