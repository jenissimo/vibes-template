import { logger } from '@/engine/logging';
import { assetManager } from './assets/AssetManager';
import { ServiceRegistry, ServiceKeys } from '@/engine/registry';
import { remoteDebugService } from '@/engine/debug';

/**
 * PreGameLoader - –∑–∞–≥—Ä—É–∑–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –î–û –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã
 * –í–∫–ª—é—á–∞–µ—Ç: —à—Ä–∏—Ñ—Ç—ã, –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é, –±–∞–∑–æ–≤—ã–µ —Å–µ—Ä–≤–∏—Å—ã, debug –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
 */
export class PreGameLoader {
  private static instance: PreGameLoader | null = null;
  private isLoaded = false;

  public static getInstance(): PreGameLoader {
    if (!PreGameLoader.instance) {
      PreGameLoader.instance = new PreGameLoader();
    }
    return PreGameLoader.instance;
  }

  public static resetInstance(): void {
    PreGameLoader.instance = null;
    logger.info('üîÑ PreGameLoader instance reset', { source: 'preload' });
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ —Ä–µ—Å—É—Ä—Å—ã, –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –î–û –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã
   */
  public async load(): Promise<void> {
    if (this.isLoaded) {
      logger.warn('PreGameLoader —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω!', { source: 'preload' });
      return;
    }

    logger.info('üöÄ PreGameLoader: –Ω–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏...', { source: 'preload' });

    try {
      // 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º AssetManager
      logger.info('üéØ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AssetManager...', { source: 'preload' });
      await assetManager.initialize();
      logger.info('‚úÖ AssetManager –≥–æ—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ —à—Ä–∏—Ñ—Ç—ã)', { source: 'preload' });

      // 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º debug —Å–µ—Ä–≤–∏—Å—ã
      this.initializeDebugServices();

      // 3. –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ —Å–µ—Ä–≤–∏—Å—ã
      this.registerBasicServices();

      this.isLoaded = true;
      logger.info('‚úÖ PreGameLoader –∑–∞–≤–µ—Ä—à–µ–Ω!', { source: 'preload' });
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ PreGameLoader', error as Error);
      throw error;
    }
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è debug —Å–µ—Ä–≤–∏—Å–æ–≤
   */
  private async initializeDebugServices(): Promise<void> {
    const debugUrl = this.getDebugServerURL();
    
    if (debugUrl) {
      logger.info('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ debug —Å–µ—Ä–≤–µ—Ä–∞...', { url: debugUrl, source: 'preload' });
      const isAvailable = await this.checkWebSocketAvailability(debugUrl);
      
      if (isAvailable) {
        logger.info('‚úÖ Debug —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω, –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è...', { url: debugUrl, source: 'preload' });
        remoteDebugService.connect(debugUrl);
      } else {
        logger.info('‚ö†Ô∏è Debug —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω', { url: debugUrl, source: 'preload' });
      }
    }
  }

  /**
   * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
   */
  private registerBasicServices(): void {
    logger.info('üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤...', { source: 'preload' });
    
    // AssetManager —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
    ServiceRegistry.register(ServiceKeys.RemoteDebug, remoteDebugService, { replace: true });
    
    logger.info('‚úÖ –ë–∞–∑–æ–≤—ã–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã', { source: 'preload' });
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å URL debug —Å–µ—Ä–≤–µ—Ä–∞
   */
  private getDebugServerURL(): string | null {
    if (import.meta.env.DEV) {
      const hostname = window.location.hostname;
      return `ws://${hostname}:3333`;
    }
    return import.meta.env.VITE_REMOTE_DEBUG_URL || null;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å WebSocket —Å–µ—Ä–≤–µ—Ä–∞
   */
  private async checkWebSocketAvailability(url: string): Promise<boolean> {
    return new Promise((resolve) => {
      const ws = new WebSocket(url);
      const timeout = setTimeout(() => {
        ws.close();
        resolve(false);
      }, 2000);

      ws.onopen = () => {
        clearTimeout(timeout);
        ws.close();
        resolve(true);
      };

      ws.onerror = () => {
        clearTimeout(timeout);
        resolve(false);
      };
    });
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∑–∞–≥—Ä—É–∂–µ–Ω –ª–∏ PreGameLoader
   */
  public get loaded(): boolean {
    return this.isLoaded;
  }
}
