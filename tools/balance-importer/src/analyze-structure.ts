/**
 * Analyze all columns in all sheets
 * –ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö —Å—Ç–æ–ª–±—Ü–æ–≤ –≤–æ –≤—Å–µ—Ö –ª–∏—Å—Ç–∞—Ö
 */

import { fetchSheetData, validateSpreadsheet } from './google';
import { config } from './config';

async function analyzeAllSheets() {
  console.log('üîç --- –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≤—Å–µ—Ö –ª–∏—Å—Ç–æ–≤ ---');
  console.log(`üìä –¢–∞–±–ª–∏—Ü–∞: ${config.spreadsheetId}`);
  console.log('');

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ç–∞–±–ª–∏—Ü—ã
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ç–∞–±–ª–∏—Ü—ã...');
    const isAccessible = await validateSpreadsheet(config.spreadsheetId!);
    if (!isAccessible) {
      throw new Error('–¢–∞–±–ª–∏—Ü–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID —Ç–∞–±–ª–∏—Ü—ã –∏ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞.');
    }
    console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ –¥–æ—Å—Ç—É–ø–Ω–∞\n');

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –ª–∏—Å—Ç
    for (const sheetConfig of config.sheets) {
      try {
        console.log(`üìã –ê–Ω–∞–ª–∏–∑ –ª–∏—Å—Ç–∞: "${sheetConfig.sheetName}"`);
        console.log('‚îÄ'.repeat(50));
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        const rawData = await fetchSheetData(config.spreadsheetId!, sheetConfig.sheetName);
        
        if (rawData.length === 0) {
          console.log('‚ùå –õ–∏—Å—Ç –ø—É—Å—Ç');
          console.log('');
          continue;
        }

        const [headers, ...dataRows] = rawData;
        console.log(`üìä –°—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö: ${dataRows.length}`);
        console.log(`üìã –°—Ç–æ–ª–±—Ü–æ–≤: ${headers.length}`);
        console.log('');
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Å—Ç–æ–ª–±–µ—Ü
        console.log('üìù –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å—Ç–æ–ª–±—Ü–æ–≤:');
        headers.forEach((header, index) => {
          if (!header) {
            console.log(`   ${index + 1}. [–ü–£–°–¢–û–ô –ó–ê–ì–û–õ–û–í–û–ö]`);
            return;
          }

          // –°–æ–±–∏—Ä–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –∑–Ω–∞—á–µ–Ω–∏–π –∏–∑ –ø–µ—Ä–≤—ã—Ö 3 —Å—Ç—Ä–æ–∫
          const sampleValues = dataRows.slice(0, 3).map(row => row[index] || '[–ü–£–°–¢–û]');
          const uniqueValues = [...new Set(sampleValues)];
          
          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö
          let dataType = 'string';
          const nonEmptyValues = sampleValues.filter(v => v !== '[–ü–£–°–¢–û]' && v !== '');
          
          if (nonEmptyValues.length > 0) {
            const firstValue = nonEmptyValues[0];
            if (!isNaN(Number(firstValue)) && firstValue !== '') {
              dataType = 'number';
            } else if (firstValue.toLowerCase() === 'true' || firstValue.toLowerCase() === 'false') {
              dataType = 'boolean';
            } else if (firstValue.startsWith('{') && firstValue.endsWith('}')) {
              dataType = 'object';
            } else if (firstValue.includes(',')) {
              dataType = 'array';
            }
          }

          console.log(`   ${index + 1}. "${header}" (${dataType})`);
          console.log(`      –ü—Ä–∏–º–µ—Ä—ã: ${uniqueValues.join(' | ')}`);
          
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø—É—Å—Ç—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º
          const emptyCount = dataRows.filter(row => !row[index] || row[index] === '').length;
          if (emptyCount > 0) {
            console.log(`      –ü—É—Å—Ç—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π: ${emptyCount}/${dataRows.length} (${Math.round(emptyCount/dataRows.length*100)}%)`);
          }
          console.log('');
        });

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        console.log('üìÑ –ü–µ—Ä–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö:');
        const previewRows = dataRows.slice(0, 3);
        previewRows.forEach((row, rowIndex) => {
          console.log(`   –°—Ç—Ä–æ–∫–∞ ${rowIndex + 1}: ${row.join(' | ')}`);
        });
        
        console.log('');
        console.log('‚ïê'.repeat(60));
        console.log('');
        
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –ª–∏—Å—Ç–∞ "${sheetConfig.sheetName}":`, error);
        console.log('');
      }
    }

    console.log('üéâ --- –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! ---');
    
  } catch (error) {
    console.error('üí• --- –û–®–ò–ë–ö–ê –ê–ù–ê–õ–ò–ó–ê ---');
    console.error(error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫
analyzeAllSheets().catch(err => {
  console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', err);
  process.exit(1);
});
