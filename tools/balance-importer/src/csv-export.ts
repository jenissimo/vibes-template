/**
 * CSV Export utility for Google Sheets
 * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ Google Sheets –≤ CSV —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ª–∏—Å—Ç–æ–≤
 */

import { fetchSheetData, validateSpreadsheet, getSheetsClient } from './google';
import { config } from './config';
import fs from 'fs';
import path from 'path';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–∏—Å—Ç–µ
interface SheetInfo {
  name: string;
  title: string;
  description?: string;
  isService: boolean;
  isContext: boolean;
  isData: boolean;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ CSV
function convertToCSV(data: any[][]): string {
  if (!data || data.length === 0) {
    return '';
  }

  return data
    .map(row => 
      row.map(cell => {
        // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∫–∞–≤—ã—á–∫–∏ –∏ –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ –∫–∞–≤—ã—á–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å –∑–∞–ø—è—Ç—ã–µ –∏–ª–∏ –ø–µ—Ä–µ–Ω–æ—Å—ã
        const cellStr = String(cell || '');
        if (cellStr.includes(',') || cellStr.includes('"') || cellStr.includes('\n')) {
          return `"${cellStr.replace(/"/g, '""')}"`;
        }
        return cellStr;
      }).join(',')
    )
    .join('\n');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –ª–∏—Å—Ç–æ–≤ —Å –∏—Ö –æ–ø–∏—Å–∞–Ω–∏—è–º–∏
export async function getAllSheetsInfo(): Promise<SheetInfo[]> {
  try {
    const sheets = await getSheetsClient();
    const response = await sheets.spreadsheets.get({
      spreadsheetId: config.spreadsheetId!,
    });

    const sheetsInfo: SheetInfo[] = [];
    
    if (response.data.sheets) {
      for (const sheet of response.data.sheets) {
        const title = sheet.properties?.title || '';
        const isService = title.startsWith('!');
        const isContext = title.startsWith('?');
        const isData = !isService && !isContext;
        
        sheetsInfo.push({
          name: title,
          title: title,
          description: isContext ? '–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –ª–∏—Å—Ç —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º' : undefined,
          isService,
          isContext,
          isData
        });
      }
    }

    return sheetsInfo;
  } catch (error) {
    console.error('[CSV Export] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ª–∏—Å—Ç–æ–≤:', error);
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤—Å–µ—Ö –ª–∏—Å—Ç–æ–≤ –≤ CSV —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
export async function exportAllSheetsToCSV(): Promise<void> {
  console.log('üöÄ --- –≠–∫—Å–ø–æ—Ä—Ç Google Sheets –≤ CSV ---');
  console.log(`üìä –¢–∞–±–ª–∏—Ü–∞: ${config.spreadsheetId}`);
  console.log('');

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ç–∞–±–ª–∏—Ü—ã
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ç–∞–±–ª–∏—Ü—ã...');
    const isAccessible = await validateSpreadsheet(config.spreadsheetId!);
    if (!isAccessible) {
      throw new Error('–¢–∞–±–ª–∏—Ü–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID —Ç–∞–±–ª–∏—Ü—ã –∏ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞.');
    }
    console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ –¥–æ—Å—Ç—É–ø–Ω–∞\n');

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö –ª–∏—Å—Ç–∞—Ö
    console.log('üìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ª–∏—Å—Ç–æ–≤...');
    const sheetsInfo = await getAllSheetsInfo();
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º –ª–∏—Å—Ç—ã
    const serviceSheets = sheetsInfo.filter(s => s.isService);
    const contextSheets = sheetsInfo.filter(s => s.isContext);
    const dataSheets = sheetsInfo.filter(s => s.isData);
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –ª–∏—Å—Ç–æ–≤:`);
    console.log(`   üîß –°–ª—É–∂–µ–±–Ω—ã–µ (!): ${serviceSheets.length}`);
    console.log(`   üìù –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ (?): ${contextSheets.length}`);
    console.log(`   üìä –î–∞–Ω–Ω—ã–µ: ${dataSheets.length}`);
    console.log('');

    // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è CSV —Ñ–∞–π–ª–æ–≤
    const csvDir = path.join(process.cwd(), 'csv-export');
    if (!fs.existsSync(csvDir)) {
      fs.mkdirSync(csvDir, { recursive: true });
    }

    // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –ª–∏—Å—Ç—ã (–¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã)
    if (contextSheets.length > 0) {
      console.log('üìù --- –≠–∫—Å–ø–æ—Ä—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã—Ö –ª–∏—Å—Ç–æ–≤ ---');
      for (const sheetInfo of contextSheets) {
        try {
          console.log(`üìã –≠–∫—Å–ø–æ—Ä—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –ª–∏—Å—Ç–∞: "${sheetInfo.title}"`);
          
          const rawData = await fetchSheetData(config.spreadsheetId!, sheetInfo.title);
          const csvContent = convertToCSV(rawData);
          
          const csvPath = path.join(csvDir, `context_${sheetInfo.title.replace('?', '')}.csv`);
          fs.writeFileSync(csvPath, csvContent, 'utf8');
          
          console.log(`‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –ª–∏—Å—Ç —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ ${csvPath}`);
          console.log(`   üìä –°—Ç—Ä–æ–∫: ${rawData.length}, –ö–æ–ª–æ–Ω–æ–∫: ${rawData[0]?.length || 0}`);
          console.log('');
          
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –ª–∏—Å—Ç–∞ "${sheetInfo.title}":`, error);
        }
      }
    }

    // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ª–∏—Å—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
    if (dataSheets.length > 0) {
      console.log('üìä --- –≠–∫—Å–ø–æ—Ä—Ç –ª–∏—Å—Ç–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏ ---');
      for (const sheetInfo of dataSheets) {
        try {
          console.log(`üìã –≠–∫—Å–ø–æ—Ä—Ç –ª–∏—Å—Ç–∞: "${sheetInfo.title}"`);
          
          const rawData = await fetchSheetData(config.spreadsheetId!, sheetInfo.title);
          const csvContent = convertToCSV(rawData);
          
          const csvPath = path.join(csvDir, `${sheetInfo.title}.csv`);
          fs.writeFileSync(csvPath, csvContent, 'utf8');
          
          console.log(`‚úÖ –õ–∏—Å—Ç —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ ${csvPath}`);
          console.log(`   üìä –°—Ç—Ä–æ–∫: ${rawData.length}, –ö–æ–ª–æ–Ω–æ–∫: ${rawData[0]?.length || 0}`);
          
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
          if (rawData.length > 0) {
            console.log('   üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö:');
            const headers = rawData[0];
            const dataRows = rawData.slice(1);
            
            console.log(`      –ó–∞–≥–æ–ª–æ–≤–∫–∏ (${headers.length}): ${headers.join(', ')}`);
            
            if (dataRows.length > 0) {
              console.log(`      –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–∞–Ω–Ω—ã—Ö: ${dataRows[0].join(' | ')}`);
              if (dataRows.length > 1) {
                console.log(`      –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–∞–Ω–Ω—ã—Ö: ${dataRows[1].join(' | ')}`);
              }
              if (dataRows.length > 2) {
                console.log(`      ... –∏ –µ—â–µ ${dataRows.length - 2} —Å—Ç—Ä–æ–∫`);
              }
            }
          }
          console.log('');
          
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –ª–∏—Å—Ç–∞ "${sheetInfo.title}":`, error);
          console.log('');
        }
      }
    }

    // –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–Ω—ã–π —Ñ–∞–π–ª —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ª–∏—Å—Ç–∞—Ö
    const summaryPath = path.join(csvDir, 'sheets_summary.json');
    const summary = {
      totalSheets: sheetsInfo.length,
      serviceSheets: serviceSheets.map(s => s.title),
      contextSheets: contextSheets.map(s => s.title),
      dataSheets: dataSheets.map(s => s.title),
      exportedAt: new Date().toISOString()
    };
    
    fs.writeFileSync(summaryPath, JSON.stringify(summary, null, 2), 'utf8');
    console.log(`üìÑ –°–≤–æ–¥–∫–∞ –ø–æ –ª–∏—Å—Ç–∞–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤: ${summaryPath}`);

    console.log('üéâ --- –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! ---');
    console.log(`üìÅ CSV —Ñ–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: ${csvDir}`);
    
  } catch (error) {
    console.error('üí• --- –û–®–ò–ë–ö–ê –≠–ö–°–ü–û–†–¢–ê ---');
    console.error(error);
    process.exit(1);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ª–∏—Å—Ç–∞
export async function exportSheetToCSV(sheetName: string): Promise<void> {
  console.log(`üöÄ --- –≠–∫—Å–ø–æ—Ä—Ç –ª–∏—Å—Ç–∞ "${sheetName}" –≤ CSV ---`);
  
  try {
    const rawData = await fetchSheetData(config.spreadsheetId!, sheetName);
    const csvContent = convertToCSV(rawData);
    
    const csvDir = path.join(process.cwd(), 'csv-export');
    if (!fs.existsSync(csvDir)) {
      fs.mkdirSync(csvDir, { recursive: true });
    }
    
    const csvPath = path.join(csvDir, `${sheetName}.csv`);
    fs.writeFileSync(csvPath, csvContent, 'utf8');
    
    console.log(`‚úÖ –õ–∏—Å—Ç —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ ${csvPath}`);
    console.log(`üìä –°—Ç—Ä–æ–∫: ${rawData.length}, –ö–æ–ª–æ–Ω–æ–∫: ${rawData[0]?.length || 0}`);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    console.log('\nüìã –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:');
    rawData.forEach((row, index) => {
      console.log(`${index.toString().padStart(3)}: ${row.join(' | ')}`);
    });
    
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞:', error);
    throw error;
  }
}

// –ï—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  const sheetName = process.argv[2];
  
  if (sheetName) {
    // –≠–∫—Å–ø–æ—Ä—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ª–∏—Å—Ç–∞
    exportSheetToCSV(sheetName).catch(err => {
      console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', err);
      process.exit(1);
    });
  } else {
    // –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –ª–∏—Å—Ç–æ–≤
    exportAllSheetsToCSV().catch(err => {
      console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', err);
      process.exit(1);
    });
  }
}