/**
 * Google Sheets API integration
 * –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Google Sheets API
 */

import { google } from 'googleapis';
import { GoogleAuth } from 'google-auth-library';
import path from 'path';

const CREDENTIALS_PATH = path.join(process.cwd(), '../../google-credentials.json');

// –°–æ–∑–¥–∞–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç
export async function getSheetsClient() {
  try {
    const auth = new GoogleAuth({
      keyFile: CREDENTIALS_PATH,
      scopes: ['https://www.googleapis.com/auth/spreadsheets.readonly'],
    });

    const authClient = await auth.getClient();
    // –ü—Ä–∏–≤–æ–¥–∏–º –∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É —Ç–∏–ø—É –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å googleapis
    return google.sheets({ version: 'v4', auth: authClient as any });
  } catch (error) {
    console.error('[Google] –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error);
    throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å Google API. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª ${CREDENTIALS_PATH}`);
  }
}

// –ö–µ—à –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ Google Sheets (—Å–æ–∑–¥–∞–µ–º –æ–¥–∏–Ω —Ä–∞–∑)
let sheetsClientCache: any = null;

// –ü–æ–ª—É—á–∞–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç
async function getCachedSheetsClient() {
  if (!sheetsClientCache) {
    sheetsClientCache = await getSheetsClient();
  }
  return sheetsClientCache;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å –ª–∏—Å—Ç–∞
export async function fetchSheetData(spreadsheetId: string, sheetName: string): Promise<any[][]> {
  try {
    const sheets = await getCachedSheetsClient();
    console.log(`[Google] –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å –ª–∏—Å—Ç–∞: "${sheetName}"...`);
    
    const response = await sheets.spreadsheets.values.get({
      spreadsheetId,
      range: sheetName, // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–µ—Å—å –ª–∏—Å—Ç
    });

    const values = response.data.values;
    if (!values || values.length === 0) {
      throw new Error(`–õ–∏—Å—Ç "${sheetName}" –ø—É—Å—Ç –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
    }

    console.log(`[Google] –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${values.length - 1} —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö.`);
    return values;
  } catch (error) {
    console.error(`[Google] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ª–∏—Å—Ç–∞ "${sheetName}":`, error);
    throw error;
  }
}

// –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –ª–∏—Å—Ç–æ–≤
export async function fetchAllSheetsData(spreadsheetId: string, sheetNames: string[]): Promise<Record<string, any[][]>> {
  try {
    const sheets = await getCachedSheetsClient();
    console.log(`[Google] –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ ${sheetNames.length} –ª–∏—Å—Ç–æ–≤...`);
    
    // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –ø—Ä–æ–º–∏—Å–æ–≤ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    const promises = sheetNames.map(async (sheetName) => {
      try {
        const response = await sheets.spreadsheets.values.get({
          spreadsheetId,
          range: sheetName,
        });

        const values = response.data.values;
        if (!values || values.length === 0) {
          throw new Error(`–õ–∏—Å—Ç "${sheetName}" –ø—É—Å—Ç –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
        }

        console.log(`[Google] ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω –ª–∏—Å—Ç "${sheetName}": ${values.length - 1} —Å—Ç—Ä–æ–∫`);
        return { sheetName, data: values };
      } catch (error) {
        console.error(`[Google] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ª–∏—Å—Ç–∞ "${sheetName}":`, error);
        throw error;
      }
    });

    // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–≥—Ä—É–∑–æ–∫
    const results = await Promise.all(promises);
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –æ–±—ä–µ–∫—Ç –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
    const dataMap: Record<string, any[][]> = {};
    results.forEach(({ sheetName, data }) => {
      dataMap[sheetName] = data;
    });

    console.log(`[Google] üéâ –í—Å–µ ${sheetNames.length} –ª–∏—Å—Ç–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ!`);
    return dataMap;
  } catch (error) {
    console.error('[Google] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ:', error);
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ç–∞–±–ª–∏—Ü—ã
export async function validateSpreadsheet(spreadsheetId: string): Promise<boolean> {
  try {
    const sheets = await getSheetsClient();
    const response = await sheets.spreadsheets.get({
      spreadsheetId,
    });
    
    console.log(`[Google] –¢–∞–±–ª–∏—Ü–∞ –Ω–∞–π–¥–µ–Ω–∞: "${response.data.properties?.title}"`);
    return true;
  } catch (error) {
    console.error('[Google] –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–∞–±–ª–∏—Ü–µ:', error);
    return false;
  }
}

