#!/usr/bin/env bun
/**
 * –°–∫–∞—á–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ –Ω—É–∂–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã —Å Google Fonts (css2) –∏ —Å–≥–µ–Ω–µ—Ä–∏—Ç—å fonts.css
 * Bun/TypeScript. –ù–µ —Ç—Ä–µ–±—É–µ—Ç —Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤.
 *
 * –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç—è–Ω–µ—Ç —Ç–æ–ª—å–∫–æ latin-–≥–ª–∏—Ñ—ã (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å–∞–±—Å–µ—Ç—ã).
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–ª–∞–≥–∏:
 *   --out=DIR         –∫–∞—Ç–∞–ª–æ–≥ –≤—ã–≤–æ–¥–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é src/assets/fonts)
 *   --subset=NAME     latin | latin-ext | cyrillic | greek | all (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é latin)
 *   --text=STRING     –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –Ω–∞–±–æ—Ä –≥–ª–∏—Ñ–æ–≤ (Google –≤–µ—Ä–Ω—ë—Ç —É—Ä–µ–∑–∞–Ω–Ω—ã–π —Ñ–∞–π–ª)
 *   --force           –ø–µ—Ä–µ–∫–∞—á–∞—Ç—å –¥–∞–∂–µ –µ—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
 *   --dry-run         –Ω–∏—á–µ–≥–æ –Ω–µ –∫–∞—á–∞—Ç—å, —Ç–æ–ª—å–∫–æ –ø–æ–∫–∞–∑–∞—Ç—å –ø–ª–∞–Ω
 *   --manual          –ø–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Ä—É—á–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
 */

import { mkdir, writeFile, access } from 'node:fs/promises';
import { existsSync } from 'node:fs';
import { join, dirname } from 'node:path';
import { fileURLToPath } from 'node:url';

// ---------- –ö–æ–Ω—Ñ–∏–≥ –Ω—É–∂–Ω—ã—Ö —Å–µ–º–µ–π—Å—Ç–≤ –∏ –≤–µ—Å–æ–≤ ----------
type FontCfg = { family: string; weights: number[]; styles?: ('normal'|'italic')[] };

const FONT_CONFIG: FontCfg[] = [
  { family: 'Orbitron', weights: [400, 700, 900] },
  { family: 'Exo 2',    weights: [400, 600, 700] },
  { family: 'Rajdhani', weights: [400, 600, 700] },
];

// ---------- CLI-–ø–∞—Ä–∞–º–µ—Ç—Ä—ã ----------
const argv = process.argv.slice(2);
const getArg = (name: string, def?: string) => {
  const hit = argv.find(a => a.startsWith(`--${name}=`));
  if (hit) return hit.split('=')[1];
  return argv.includes(`--${name}`) ? 'true' : def;
};

const OUT_DIR = getArg('out', join(process.cwd(), 'src', 'assets', 'fonts'))!;
const SUBSET = (getArg('subset', 'latin') || 'latin').toLowerCase(); // latin | latin-ext | cyrillic | greek | all
const TEXT_PARAM = getArg('text'); // —Å—Ç—Ä–æ–∫–∞ –¥–ª—è &text=
const FORCE = getArg('force') === 'true';
const DRY = getArg('dry-run') === 'true';

if (argv.includes('--manual')) {
  console.log(`
üîó –†—É—á–Ω–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ:
  1) –û—Ç–∫—Ä–æ–π https://fonts.google.com/
  2) –í—ã–±–µ—Ä–∏ —Å–µ–º–µ–π—Å—Ç–≤–∞ –∏ –≤–µ—Å–∞:
     - Orbitron (400, 700, 900)
     - Exo 2 (400, 600, 700)
     - Rajdhani (400, 600, 700)
  3) –°–∫–∞—á–∞–π –∏ –ø–æ–ª–æ–∂–∏ *.woff2 –≤ ${OUT_DIR}
  4) –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π @font-face (–∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π fonts.css, –∫–æ—Ç–æ—Ä—ã–π –¥–µ–ª–∞–µ—Ç —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç).
`);
  process.exit(0);
}

// ---------- –£—Ç–∏–ª–∏—Ç—ã ----------
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const UA = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36';
const sleep = (ms: number) => new Promise(r => setTimeout(r, ms));

const slug = (s: string) =>
  s.toLowerCase().replace(/[^a-z0-9]+/g, '-').replace(/^-+|-+$/g, '');

function buildCssUrl(cfg: FontCfg[], text?: string) {
  const families = cfg.map(c => {
    const styles = (c.styles && c.styles.length ? c.styles : ['normal']);
    // Google css2 –¥–ª—è italic —Ç—Ä–µ–±—É–µ—Ç "ital,wght@0,400;0,700;1,400;1,700" ‚Äî –∑–¥–µ—Å—å –æ—Å—Ç–∞–≤–∏–º normal
    const weights = c.weights.join(';');
    return `family=${encodeURIComponent(c.family)}:wght@${weights}`;
  }).join('&');
  const display = 'swap';
  const textParam = text ? `&text=${encodeURIComponent(text)}` : '';
  return `https://fonts.googleapis.com/css2?${families}&display=${display}${textParam}`;
}

// –ü—Ä–æ—Å—Ç–µ–π—à–∏–π –¥–µ—Ç–µ–∫—Ç–æ—Ä —Å–∞–±—Å–µ—Ç–æ–≤ –ø–æ unicode-range
function detectSubset(unicodeRange: string): string {
  const u = unicodeRange.replace(/\s+/g, '').toUpperCase();
  // very rough mapping
  if (/U\+0000-00FF|U\+000-00FF|U\+000-05FF/.test(u)) return 'latin';
  if (/U\+0100-024F|U\+1E00-1EFF/.test(u)) return 'latin-ext';
  if (/U\+0400-04FF|U\+0500-052F|U\+2DE0-2DFF|U\+A640-A69F/.test(u)) return 'cyrillic';
  if (/U\+0370-03FF|U\+1F00-1FFF/.test(u)) return 'greek';
  return 'unknown';
}

function subsetAllowed(found: string): boolean {
  if (SUBSET === 'all') return true;
  if (found === SUBSET) return true;
  // –ï—Å–ª–∏ –ø—Ä–æ—Å–∏–º latin, –∞ —É —à—Ä–∏—Ñ—Ç–∞ —Ç–æ–ª—å–∫–æ unknown ‚Äî –≤—Å—ë —Ä–∞–≤–Ω–æ –≤–æ–∑—å–º—ë–º (–±—ã–≤–∞–µ—Ç –º–æ–Ω–æ–ª–∏—Ç)
  if (SUBSET === 'latin' && found === 'unknown') return true;
  return false;
}

type Face = {
  family: string;
  style: 'normal' | 'italic';
  weight: number;
  unicodeRange: string;
  url: string; // woff2
  subset: string; // latin | latin-ext | ...
  fileName: string;
};

// –ü–∞—Ä—Å–µ—Ä CSS –æ—Ç Google Fonts (css2)
function parseGoogleCss(css: string): Face[] {
  const faces: Face[] = [];
  const blocks = css.match(/@font-face\s*{[^}]+}/g) || [];
  for (const block of blocks) {
    const fam = /font-family:\s*'([^']+)'/i.exec(block)?.[1];
    const style = /font-style:\s*(normal|italic)/i.exec(block)?.[1] as 'normal'|'italic'|undefined;
    const weightStr = /font-weight:\s*(\d{3})/i.exec(block)?.[1];
    
    // –ò—â–µ–º woff2 –≤ src, –µ—Å–ª–∏ –Ω–µ—Ç - –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π URL
    let srcUrl = /src:\s*url\(([^)]+\.woff2)\)/i.exec(block)?.[1];
    if (!srcUrl) {
      // –ï—Å–ª–∏ –Ω–µ—Ç woff2, –∏—â–µ–º –ª—é–±–æ–π URL –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ woff2
      const anyUrl = /src:\s*url\(([^)]+)\)/i.exec(block)?.[1];
      if (anyUrl) {
        srcUrl = anyUrl.replace(/\.(ttf|woff)$/, '.woff2');
      }
    }
    
    const ur = /unicode-range:\s*([^;]+);/i.exec(block)?.[1] || '';

    if (!fam || !style || !weightStr || !srcUrl) continue;

    const subset = detectSubset(ur);
    const weight = Number(weightStr);
    const familySlug = slug(fam);
    const styleSuffix = style === 'italic' ? '-italic' : '';
    const subsetSuffix = subset !== 'unknown' ? `-${subset}` : '';
    const fileName = `${familySlug}${subsetSuffix}-${weight}${styleSuffix}.woff2`;

    faces.push({ family: fam, style, weight, unicodeRange: ur, url: srcUrl, subset, fileName });
  }
  return faces;
}

async function ensureDir(dir: string) {
  if (!existsSync(dir)) await mkdir(dir, { recursive: true });
}

async function fileExists(p: string) {
  try { await access(p); return true; } catch { return false; }
}

async function download(url: string, toPath: string) {
  const res = await fetch(url, {
    headers: {
      'User-Agent': UA,
      'Accept': 'text/css,*/*;q=0.1',
    }
  });
  if (!res.ok) throw new Error(`HTTP ${res.status} ${res.statusText}`);
  const buf = Buffer.from(await res.arrayBuffer());
  await ensureDir(dirname(toPath));
  await writeFile(toPath, buf);
  return buf.byteLength;
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ fonts.css
function makeLocalCss(faces: Face[], outRelBase = '.') {
  const lines: string[] = [];
  for (const f of faces) {
    lines.push(
`@font-face {
  font-family: '${f.family}';
  font-style: ${f.style};
  font-weight: ${f.weight};
  font-display: swap;
  src: url('${outRelBase}/${f.fileName}') format('woff2');
}`
    );
  }
  return lines.join('\n\n') + '\n';
}

// ---------- –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–ª–æ—É ----------
async function main() {
  console.log(`üöÄ –ö–∞—á–∞—é —à—Ä–∏—Ñ—Ç—ã ‚Üí ${OUT_DIR} (subset=${SUBSET}${TEXT_PARAM ? `, text=${TEXT_PARAM.length} chars` : ''})`);

  await ensureDir(OUT_DIR);

  const cssUrl = buildCssUrl(FONT_CONFIG, TEXT_PARAM);
  console.log(`üåê CSS: ${cssUrl}`);

  const cssRes = await fetch(cssUrl, {
    headers: { 'User-Agent': UA, 'Accept': 'text/css,*/*;q=0.1' }
  });
  if (!cssRes.ok) {
    throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å CSS: HTTP ${cssRes.status} ${cssRes.statusText}`);
  }
  const cssText = await cssRes.text();

  const facesAll = parseGoogleCss(cssText);

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –Ω—É–∂–Ω—ã–º —Å–µ–º–µ–π—Å—Ç–≤–∞–º/–≤–µ—Å–∞–º/—Å—Ç–∏–ª—è–º –∏ —Å–∞–±—Å–µ—Ç–∞–º
  const wanted = new Map<string, true>();
  for (const c of FONT_CONFIG) {
    const styles = c.styles?.length ? c.styles : ['normal'];
    for (const w of c.weights) for (const s of styles)
      wanted.set(`${c.family}|${s}|${w}`, true);
  }

  let faces = facesAll.filter(f => wanted.has(`${f.family}|${f.style}|${f.weight}`) && subsetAllowed(f.subset));

  // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª—å –ø–æ –∫–ª—é—á—É family/style/weight (–µ—Å–ª–∏ –ø—Ä–∏—à–ª–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–∞–±—Å–µ—Ç–æ–≤, –∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—Ç–µ–ª –æ–¥–∏–Ω)
  const dedup = new Map<string, Face>();
  for (const f of faces) {
    const key = `${f.family}|${f.style}|${f.weight}`;
    if (!dedup.has(key)) dedup.set(key, f);
    else {
      // –ü—Ä–µ–¥–ø–æ—á—Ç–µ–º subset == –∑–∞–ø—Ä–æ—à–µ–Ω–Ω–æ–º—É
      const cur = dedup.get(key)!;
      if (f.subset === SUBSET && cur.subset !== SUBSET) dedup.set(key, f);
    }
  }
  faces = Array.from(dedup.values());

  if (faces.length === 0) {
    console.warn('‚ö†Ô∏è –ù–µ—á–µ–≥–æ –∫–∞—á–∞—Ç—å (–≤–æ–∑–º–æ–∂–Ω–æ, —Ñ–∏–ª—å—Ç—Ä subset —Å–ª–∏—à–∫–æ–º —Å—Ç—Ä–æ–≥–∏–π). –ü–æ–ø—Ä–æ–±—É–π --subset=all');
  }

  // –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
  const results: { face: Face; saved: boolean; size?: number }[] = [];
  for (const face of faces) {
    const dest = join(OUT_DIR, face.fileName);
    if (!FORCE && await fileExists(dest)) {
      console.log(`‚è≠Ô∏è –£–∂–µ –µ—Å—Ç—å: ${face.fileName}`);
      results.push({ face, saved: false });
      continue;
    }
    if (DRY) {
      console.log(`üß™ [dry] –°–∫–∞—á–∞–ª –±—ã ${face.url} ‚Üí ${face.fileName}`);
      results.push({ face, saved: false });
      continue;
    }
    try {
      const size = await download(face.url, dest);
      console.log(`‚úÖ ${face.fileName} (${Math.round(size/1024)} KB)`);
      // –ù–µ–º–Ω–æ–≥–æ –ø–∞—É–∑—ã, —á—Ç–æ–±—ã –±—ã—Ç—å –≤–µ–∂–ª–∏–≤—ã–º–∏ –∫ CDN
      await sleep(80);
      results.push({ face, saved: true, size });
    } catch (e) {
      console.error(`‚ùå –û—à–∏–±–∫–∞: ${face.fileName}`, e);
    }
  }

  // –ì–µ–Ω–µ—Ä–∏–º –ª–æ–∫–∞–ª—å–Ω—ã–π CSS
  const localCss = makeLocalCss(faces, '.');
  const cssOut = join(OUT_DIR, 'fonts.css');
  if (!DRY) {
    await writeFile(cssOut, localCss, 'utf8');
    console.log(`\nüìù –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω ${cssOut}`);
  } else {
    console.log('\nüß™ [dry] –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª –±—ã fonts.css:\n');
    console.log(localCss);
  }

  console.log(`\nüéâ –ì–æ—Ç–æ–≤–æ! –í—Å–µ–≥–æ —à—Ä–∏—Ñ—Ç–æ–≤: ${faces.length}. –ö–∞—Ç–∞–ª–æ–≥: ${OUT_DIR}`);
  console.log(`üí° –ü–æ–¥–∫–ª—é—á–∞–π –≤ –ø—Ä–æ–µ–∫—Ç–µ:  import "./assets/fonts/fonts.css";`);
}

main().catch(err => {
  console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', err);
  console.log('\nüí° –ú–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å: --subset=all –∏–ª–∏ --manual');
});
